[{"content":"FTP 介绍 FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP 协议包括两个组成部分，其一为 FTP 服务器，其二为 FTP 客户端。其中 FTP 服务器用来存储文件，用户可以使用 FTP 客户端通过 FTP 协议访问位于 FTP 服务器上的资源。在开发网站的时候，通常利用 FTP 协议把网页或程序传到 Web 服务器上。此外，由于 FTP 传输效率非常高，在网络上传输大的文件时，一般也采用该协议。\n默认情况下 FTP 协议使用 TCP 端口中的 20 和 21 这两个端口，其中 20 用于传输数据，21 用于传输控制信息。但是，是否使用 20 作为传输数据的端口与 FTP 使用的传输模式有关，如果采用主动模式，那么数据传输端口就是 20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。\n如何登录 FTP 在命令行下输入ftp IP地址，按照提示输入用户名和密码，完成登陆 1 2 3 4 5 6 7 8 9 C:\\Users\\liujialin\u0026gt;ftp 192.168.3.1\t#直接 ftp IP地址 连接到 192.168.3.1。 220 (vsFTPd 3.0.3) 200 Always in UTF8 mode. 用户(192.168.3.1:(none)): root\t#输入用户名 331 Please specify the password. 密码:\t#输入密码 230 Login successful.\t#登录成功 ftp\u0026gt; 直接输入 ftp，进入 ftp 服务后输入 open IP地址，按照提示输入用户名和密码，完成登陆 1 2 3 4 5 6 7 8 9 10 C:\\Users\\liujialin\u0026gt;ftp\t#输入ftp进入ftp模式 ftp\u0026gt; open 192.168.3.1\t#输入open IP地址 连接到 192.168.3.1。 220 (vsFTPd 3.0.3) 200 Always in UTF8 mode. 用户(192.168.3.1:(none)): root\t#输入用户名 331 Please specify the password. 密码:\t#输入密码 230 Login successful.\t#登录成功 ftp\u0026gt; FTP 基本命令 其实只要说一个命令，常用的基本命令就可以知道了。这个命令就是十万个为什么\u0026mdash; ?（没错，该命令就是一个问号，等同 hlep 命令） 直接输入一个 ?，就会显示出这些命令；输入 ? 命令，就会显示该命令的帮助信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 ftp\u0026gt; ? 命令可能是缩写的。 命令为: ! delete literal prompt send ? debug ls put status append dir mdelete pwd trace ascii disconnect mdir quit type bell get mget quote user binary glob mkdir recv verbose bye hash mls remotehelp cd help mput rename close lcd open rmdir ftp\u0026gt; 比如这里随便查看几个命令的帮助信息，如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ftp\u0026gt; ? ? ? 打印本地帮助信息 ftp\u0026gt; ? dir dir 列出远程目录的内容 ftp\u0026gt; ? ls ls 列出远程目录的内容 ftp\u0026gt; ? open open 连接到远程 FTP ftp\u0026gt; ? lcd lcd 更改本地工作目录 ftp\u0026gt; help bye bye 终止 ftp 会话并退出 ftp\u0026gt; help pwd pwd 在远程计算机上打印工作目录 ftp\u0026gt; 常用命令 文件或目录操作命令 一般情况下用户都会被限制目录的访问权限，只可在当前目录下进行操作\ndir：显示服务器目录和文件列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 ftp\u0026gt; cd /home 250 Directory successfully changed. ftp\u0026gt; dir 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw-r--r-- 1 0 0 1019904 May 12 12:39 Installing_OMV5_on_Armbian.pdf -rw-r--r-- 1 0 0 106026 Aug 03 2019 breed.bin drwxr-xr-x 2 55 55 0 Apr 30 03:31 ftp -rw-r--r-- 1 0 0 2159147 Sep 09 2019 昆仑.epub -rw-r--r-- 1 0 0 441798 Feb 12 2019 流浪地球.epub 226 Directory send OK. ftp: 收到 363 字节，用时 0.01秒 24.20千字节/秒。 ftp\u0026gt; mkdir：在服务器上创建目录\n1 2 3 4 5 6 7 8 9 10 11 12 ftp\u0026gt; mkdir test 257 \u0026#34;/home/test\u0026#34; created ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. ftp ss.txt system.png test #新创建的文件夹 226 Directory send OK. ftp: 收到 34 字节，用时 0.01秒 6.80千字节/秒。 ftp\u0026gt; rmdir：在服务器上删除目录\n1 2 3 4 5 6 7 8 9 10 11 ftp\u0026gt; rmdir test 250 Remove directory operation successful. ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. ftp ss.txt system.png 226 Directory send OK. ftp: 收到 28 字节，用时 0.01秒 5.60千字节/秒。 ftp\u0026gt; ls：显示服务器简易的文件列表\n1 2 3 4 5 6 7 8 9 10 11 ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. Installing_OMV5_on_Armbian.pdf breed.bin ftp 昆仑.epub 流浪地球.epub 226 Directory send OK. ftp: 收到 83 字节，用时 0.01秒 10.38千字节/秒。 ftp\u0026gt; cd：进入服务器指定的目录\n1 2 3 ftp\u0026gt; cd /tmp 250 Directory successfully changed. ftp\u0026gt; pwd：查看服务器上的当前工作目录\n1 2 3 ftp\u0026gt; pwd 257 \u0026#34;/tmp\u0026#34; is the current directory ftp\u0026gt; rename filename [newfilename]：重命名 FTP 服务器上的文件\ndelete filename：删除 FTP 服务器上的文件\n传输方式设置命令 上传和下载文件时应该使用正确的传输类型，FTP 的传输类型分为 ASCII码方式和二进制方式两种，对 .txt、.htm 等文件应采用 ASCII码方式传输，对 .exe或图片、视频、音频等文件应采用二进制方式传输。在默认情况下，FTP 为 ASCII码传输方式。（以下 3 个命令都不带参数）\ntype：查看当前的传输方式\nascii：设定传输方式为 ASCII码方式\nbinary：设定传输方式为二进制方式\n1 2 3 4 5 6 7 8 9 ftp\u0026gt; type 使用 ascii 模式传送文件。 ftp\u0026gt; binary 200 Switching to Binary mode. ftp\u0026gt; type 使用 binary 模式传送文件。 ftp\u0026gt; ascii 200 Switching to ASCII mode. ftp\u0026gt; 上传命令 put filename [newname]\nsend filename [newname]\nfilename 为上传的本地文件名，newname 为上传至 FTP 服务器上时使用的名字，如果不指定 newname，文件将以原名上传。\n上传文件前，应该根据文件的类型设置传输方式（见文章最后），本机的工作目录也应该设置为上传文件所在的目录。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ftp\u0026gt; put C:\\Users\\liujialin\\Downloads\\system.png 200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. ftp: 发送 64878 字节，用时 0.01秒 9268.29千字节/秒。 ftp\u0026gt; send C:\\Users\\liujialin\\Downloads\\ss.txt 200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. ftp: 发送 382 字节，用时 0.00秒 382000.00千字节/秒。 ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. ftp ss.txt system.png 226 Directory send OK. ftp: 收到 28 字节，用时 0.01秒 4.67千字节/秒。 ftp\u0026gt; 下载命令 get filename [newname]\nfilename 为 FTP 服务器上的文件名，newname 为保存在本都计算机上时使用的名字，如果不指定 newname，文件将以原名保存。\nget 命令下载的文件将保存在本地计算机的工作目录下。该目录是启动 FTP 时在盘符 C: 后显示的目录。如果想修改本地计算机的工作目录，可以使用 lcd 命令。比如：lcd d:\\ 表示将工作目录设定为 D 盘的根目录。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ftp\u0026gt; lcd D:\\ 目前的本地目录 D:\\。 ftp\u0026gt; pwd 257 \u0026#34;/home\u0026#34; is the current directory ftp\u0026gt; get ss.txt ssss.txt 200 PORT command successful. Consider using PASV. 150 Opening ASCII mode data connection for ss.txt (382 bytes). 226 Transfer complete. ftp: 收到 417 字节，用时 0.00秒 417000.00千字节/秒。 ftp\u0026gt; get system.png 200 PORT command successful. Consider using PASV. 150 Opening ASCII mode data connection for system.png (64877 bytes). 226 Transfer complete. ftp: 收到 65193 字节，用时 0.00秒 65193.00千字节/秒。 ftp\u0026gt; 其他命令 mput filename1 filename2 ...：上传多个文件\nmget filename1 filename2 ...：下载多个文件\nclose：结束与服务器的 FTP 会话\nquit：结束与服务器的 FTP 会话并退出 FTP 环境\n!：转义到 shell，也就是结束与服务器的 FTP 会话并退出\n1 2 3 4 5 6 7 8 9 ftp\u0026gt; ? ! ! 转义到 shell ftp\u0026gt; ? close close 终止 ftp 会话 ftp\u0026gt; ? quit quit 终止 ftp 会话并退出 ftp\u0026gt; ? bye bye 终止 ftp 会话并退出 ftp\u0026gt; ::: tip 说明\n以上所有示例都是再 Windows 10 系统下的 CMD 命令行操作。\nLinux 同样操作方法，只是界面和盘符显示不同而已。\n:::\n","permalink":"https://blog.sfcs.eu.org/posts/it/ftp/","summary":"FTP 介绍 FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP 协议包括两个组成部分，其一为 FTP 服务器，其二为 FTP 客户端。其中 FTP 服务器用来存储文件，用户可以使用 FTP 客户端通过 FTP 协议访问位于 FTP 服务器上的资源。在开发网站的时候，通常利用 FTP 协议把网页或程序传到 Web 服务器上。此外，由于 FTP 传输效率非常高，在网络上传输大的文件时，一般也采用该协议。\n默认情况下 FTP 协议使用 TCP 端口中的 20 和 21 这两个端口，其中 20 用于传输数据，21 用于传输控制信息。但是，是否使用 20 作为传输数据的端口与 FTP 使用的传输模式有关，如果采用主动模式，那么数据传输端口就是 20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。\n如何登录 FTP 在命令行下输入ftp IP地址，按照提示输入用户名和密码，完成登陆 1 2 3 4 5 6 7 8 9 C:\\Users\\liujialin\u0026gt;ftp 192.168.3.1\t#直接 ftp IP地址 连接到 192.168.3.1。 220 (vsFTPd 3.0.3) 200 Always in UTF8 mode.","title":"FTP笔记"},{"content":"Git 笔记 Git 是什么 Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS，Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\nGit 不仅仅是个版本控制系统，它也是个内容管理系统（CMS），工作管理系统等。\nGit 安装配置 在使用 Git 前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac 和 Windows 平台上运行。\nGit 各平台安装包下载地址为：http://git-scm.com/downloads\n::: tip 说明\n本笔记主要以 Linux 平台为主\nGit 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。\n:::\n各 Linux 系统可以使用其安装包管理工具（apt-get、yum 等）进行安装：\nDebian/Ubuntu 如果你使用的系统是 Debian/Ubuntu， Git 安装命令为：\n1 2 3 4 $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev $ apt-get install git $ git --version git version 1.8.1.2 Centos/RedHat 如果你使用的系统是 Centos/RedHat， Git 安装命令为：\n1 2 3 4 $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel $ yum -y install git-core $ git --version git version 1.7.1 源码安装 我们也可以在官网下载源码包来安装，最新源码包下载地址：https://git-scm.com/download\n安装指定系统的依赖包：\n1 2 3 4 5 ########## Centos/RedHat ########## $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel ########## Debian/Ubuntu ########## $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev 解压安装下载的源码包：\n1 2 3 4 5 $ wget https://www.kernel.org/pub/software/scm/git/git-2.32.0.tar.gz $ tar -zxf git-2.32.0.tar.gz $ cd git-2.32.0 $ make prefix=/usr/local all $ sudo make prefix=/usr/local install Git 配置 Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。\n这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：\n/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 \u0026ndash;system 选项，读写的就是这个文件。 ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 \u0026ndash;global 选项，读写的就是这个文件。 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。 此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。\n用户信息 配置个人的用户名称和电子邮件地址：\n1 2 $ git config --global user.name \u0026#34;runoob\u0026#34; $ git config --global user.email test@runoob.com 如果用了 \u0026ndash;global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。\n如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 \u0026ndash;global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。\n文本编辑器 设置Git默认使用的文本编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：\n1 $ git config --global core.editor emacs 差异分析工具 还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：\n1 $ git config --global merge.tool vimdiff Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。\n当然，你也可以指定使用自己开发的工具。\n查看配置信息 要检查已有的配置信息，可以使用 git config --list 命令：\n1 2 3 4 $ git config --list http.postbuffer=2M user.name=runoob user.email=test@runoob.com 有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。\n这些配置我们也可以在 ~/.gitconfig 或 /etc/gitconfig 看到，如下所示：\n1 vim ~/.gitconfig 显示内容如下所示：\n1 2 3 4 5 [http] postBuffer = 2M [user] name = runoob email = test@runoob.com 也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：\n1 2 $ git config user.name runoob Git 工作流程 一般工作流程如下：\n克隆 Git 资源作为工作目录。 在克隆的资源上添加或修改文件。 如果其他人修改了，你可以更新资源。 在提交前查看修改。 提交修改。 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。 下图展示了 Git 的工作流程：\nGit 工作区、暂存区和版本库 基本概念 我们先来理解下 Git 工作区、暂存区和版本库概念：\n工作区：就是你在电脑里能看到的目录。\n暂存区：英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。\n下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：\n图中左侧为工作区，右侧为版本库。在版本库中标记为 \u0026ldquo;index\u0026rdquo; 的区域是暂存区（stage/index），标记为 \u0026ldquo;master\u0026rdquo; 的是 master 分支所代表的目录树。 图中我们可以看出此时 \u0026ldquo;HEAD\u0026rdquo; 实际是指向 master 分支的一个\u0026quot;游标\u0026quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 图中的 objects 标识的区域为 Git 的对象库，实际位于 \u0026ldquo;.git/objects\u0026rdquo; 目录下，里面包含了创建的各种对象及内容。 当对工作区修改（或新增）的文件执行 git add 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。 当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 当执行 git rm --cached \u0026lt;file\u0026gt; 命令时，会直接从暂存区删除文件，工作区则不做出改变。 当执行 git checkout . 或者 git checkout -- \u0026lt;file\u0026gt; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 当执行 git checkout HEAD . 或者 git checkout HEAD \u0026lt;file\u0026gt; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。 Git 创建仓库 本章节我们将为大家介绍如何创建一个 Git 仓库。\n你可以使用一个已经存在的目录作为Git仓库。\ngit init Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。\n在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。\n使用方法 使用当前目录作为Git仓库，我们只需使它初始化。\n1 git init 该命令执行完后会在当前目录生成一个 .git 目录。\n使用我们指定目录作为Git仓库。\n1 git init newrepo 初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n1 2 3 $ git add *.c $ git add README $ git commit -m \u0026#39;初始化项目版本\u0026#39; 以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。\n::: tip 注\n在 Linux 系统中，commit 信息使用单引号 \u0026rsquo;，Windows 系统，commit 信息使用双引号 \u0026quot;。\n所以在 git bash 中 git commit -m '提交说明' 这样是可以的，在 Windows 命令行中就要使用双引号 git commit -m \u0026quot;提交说明\u0026quot;。\n:::\ngit clone 我们使用 git clone 从现有 Git 仓库中拷贝项目。\n克隆仓库的命令格式为：\n1 git clone \u0026lt;repo\u0026gt; 如果我们需要克隆到指定的目录，可以使用以下命令格式：\n1 git clone \u0026lt;repo\u0026gt; \u0026lt;directory\u0026gt; 参数说明：\n**repo：**Git 仓库。 **directory：**本地目录。 比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：\n1 $ git clone git://github.com/schacon/grit.git 执行该命令后，会在当前目录下创建一个名为 grit 的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。\n如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：\n1 $ git clone git://github.com/schacon/grit.git mygrit 配置 git 的设置使用 git config 命令。\n显示当前的 git 配置信息：\n1 2 3 4 5 6 7 8 $ git config --list credential.helper=osxkeychain core.repositoryformatversion=0 core.filemode=true core.bare=false core.logallrefupdates=true core.ignorecase=true core.precomposeunicode=true 编辑 git 配置文件:\n1 2 $ git config -e # 针对当前仓库 或者：\n1 2 $ git config -e --global # 针对系统上所有仓库 设置提交代码时的用户信息：\n1 2 $ git config --global user.name \u0026#34;runoob\u0026#34; $ git config --global user.email test@runoob.com 如果去掉 \u0026ndash;global 参数只对当前仓库有效。\nGit 基本操作 Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。\n本节将对有关创建与提交你的项目快照的命令作介绍。\nGit 常用的是以下 6 个命令：git clone、git push、git add 、git commit、git checkout、git pull，后面我们会详细介绍。\n::: tip 说明\nworkspace：工作区 staging area：暂存区/缓存区 local repository：版本库或本地仓库 remote repository：远程仓库 :::\n一个简单的操作步骤：\n1 2 3 $ git init $ git add . $ git commit git init ：初始化仓库。 git add . ：添加文件到暂存区。 git commit ：将暂存区内容添加到仓库中。 创建仓库命令 下表列出了 git 创建仓库的命令：\n命令 说明 git init 初始化仓库 git clone 拷贝一份远程仓库，也就是下载一个项目。 提交与修改 Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。\n下表列出了有关创建与提交你的项目的快照的命令：\n命令 说明 git add 添加文件到仓库 git status 查看仓库当前的状态，显示有变更的文件。 git diff 比较文件的不同，即暂存区和工作区的差异。 git commit 提交暂存区到本地仓库。 git reset 回退版本。 git rm 删除工作区文件。 git mv 移动或重命名工作区文件。 提交日志 命令 说明 git log 查看历史提交记录 git blame \u0026lt;file\u0026gt; 以列表形式查看指定文件的历史修改记录 远程操作 命令 说明 git remote 远程仓库操作 git fetch 从远程获取代码库 git pull 下载远程代码并合并 git push 上传远程代码并合并 Git 分支管理 几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。\n有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。\n创建分支命令：\n1 git branch (branchname) 切换分支命令:\n1 git checkout (branchname) 当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n合并分支命令:\n1 git merge 你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。\n开始前我们先创建一个测试目录：\n1 2 3 4 5 6 7 8 9 10 $ mkdir gitdemo $ cd gitdemo/ $ git init Initialized empty Git repository... $ touch README $ git add README $ git commit -m \u0026#39;第一次版本提交\u0026#39; [master (root-commit) 3b58100] 第一次版本提交 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README 列出分支 列出分支基本命令：\n1 git branch 没有参数时，git branch 会列出你在本地的分支。\n1 2 $ git branch * master 此例的意思就是，我们有一个叫做 master 的分支，并且该分支是当前分支。\n当你执行 git init 的时候，默认情况下 Git 就会为你创建 master 分支。\n如果我们要手动创建一个分支。执行 git branch (branchname) 即可。\n1 2 3 4 $ git branch testing $ git branch * master testing 现在我们可以看到，有了一个新分支 testing。\n当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 testing 分支，Git 将还原你的工作目录到你创建分支时候的样子。\n接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ls README $ echo \u0026#39;runoob.com\u0026#39; \u0026gt; test.txt $ git add . $ git commit -m \u0026#39;add test.txt\u0026#39; [master 3e92c19] add test.txt 1 file changed, 1 insertion(+) create mode 100644 test.txt $ ls README test.txt $ git checkout testing Switched to branch \u0026#39;testing\u0026#39; $ ls README 当我们切换到 testing 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 master 分支的时候，它们有重新出现了。\n1 2 3 4 $ git checkout master Switched to branch \u0026#39;master\u0026#39; $ ls README test.txt 我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ git checkout -b newtest Switched to a new branch \u0026#39;newtest\u0026#39; $ git rm test.txt rm \u0026#39;test.txt\u0026#39; $ ls README $ touch runoob.php $ git add . $ git commit -am \u0026#39;removed test.txt、add runoob.php\u0026#39; [newtest c1501a2] removed test.txt、add runoob.php 2 files changed, 1 deletion(-) create mode 100644 runoob.php delete mode 100644 test.txt $ ls README runoob.php $ git checkout master Switched to branch \u0026#39;master\u0026#39; $ ls README test.txt 如你所见，我们创建了一个分支，在该分支的上移除了一些文件 test.txt，并添加了 runoob.php 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。\n使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。\n删除分支 删除分支命令：\n1 git branch -d (branchname) 例如我们要删除 testing 分支：\n1 2 3 4 5 6 7 $ git branch * master testing $ git branch -d testing Deleted branch testing (was 85fc7e7). $ git branch * master 分支合并 一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 git merge $ git branch * master newtest $ ls README test.txt $ git merge newtest Updating 3e92c19..c1501a2 Fast-forward runoob.php | 0 test.txt | 1 - 2 files changed, 1 deletion(-) create mode 100644 runoob.php delete mode 100644 test.txt $ ls README runoob.php 以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。\n合并完后就可以删除分支:\n1 2 $ git branch -d newtest Deleted branch newtest (was c1501a2). 删除后， 就只剩下 master 分支了：\n1 2 $ git branch * master 合并冲突 合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。\n1 2 3 $ git branch * master $ cat runoob.php 首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:\n1 2 3 \u0026lt;?php echo \u0026#39;runoob\u0026#39;; ?\u0026gt; 创建 change_site 分支：\n1 2 3 4 5 6 7 8 9 10 11 $ git checkout -b change_site Switched to a new branch \u0026#39;change_site\u0026#39; $ vim runoob.php $ head -3 runoob.php \u0026lt;?php echo \u0026#39;runoob\u0026#39;; ?\u0026gt; $ git commit -am \u0026#39;changed the runoob.php\u0026#39; [change_site 7774248] changed the runoob.php 1 file changed, 3 insertions(+) 将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的(空文件，没有代码)，我们再次修改 runoob.php 文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ git checkout master Switched to branch \u0026#39;master\u0026#39; $ cat runoob.php $ vim runoob.php # 修改内容如下 $ cat runoob.php \u0026lt;?php echo 1; ?\u0026gt; $ git diff diff --git a/runoob.php b/runoob.php index e69de29..ac60739 100644 --- a/runoob.php +++ b/runoob.php @@ -0,0 +1,3 @@ +\u0026lt;?php +echo 1; +?\u0026gt; $ git commit -am \u0026#39;修改代码\u0026#39; [master c68142b] 修改代码 1 file changed, 3 insertions(+) 现在这些改变已经记录到我的 \u0026ldquo;master\u0026rdquo; 分支了。接下来我们将 \u0026ldquo;change_site\u0026rdquo; 分支合并过来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 $ git merge change_site Auto-merging runoob.php CONFLICT (content): Merge conflict in runoob.php Automatic merge failed; fix conflicts and then commit the result. $ cat runoob.php # 代开文件，看到冲突内容 \u0026lt;?php \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD echo 1; ======= echo \u0026#39;runoob\u0026#39;; \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; change_site ?\u0026gt; 我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ vim runoob.php $ cat runoob.php \u0026lt;?php echo 1; echo \u0026#39;runoob\u0026#39;; ?\u0026gt; $ git diff diff --cc runoob.php index ac60739,b63d7d7..0000000 --- a/runoob.php +++ b/runoob.php @@@ -1,3 -1,3 +1,4 @@@ \u0026lt;?php +echo 1; + echo \u0026#39;runoob\u0026#39;; ?\u0026gt; 在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决\n1 2 3 4 5 6 7 $ git status -s UU runoob.php $ git add runoob.php $ git status -s M runoob.php $ git commit [master 88afe0e] Merge branch \u0026#39;change_site\u0026#39; 现在我们成功解决了合并中的冲突，并提交了结果。\nGit 查看提交历史 Git 提交历史一般常用两个命令：\ngit log：查看历史提交记录。 git blame \u0026lt;file\u0026gt;：以列表形式查看指定文件的历史修改记录。 git log 在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。\n针对我们前一章节的操作，使用 git log 命令列出历史提交记录如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ git log commit d5e9fc2c811e0ca2b2d28506ef7dc14171a207d9 (HEAD -\u0026gt; master) Merge: c68142b 7774248 Author: runoob \u0026lt;test@runoob.com\u0026gt; Date: Fri May 3 15:55:58 2019 +0800 Merge branch \u0026#39;change_site\u0026#39; commit c68142b562c260c3071754623b08e2657b4c6d5b Author: runoob \u0026lt;test@runoob.com\u0026gt; Date: Fri May 3 15:52:12 2019 +0800 修改代码 commit 777424832e714cf65d3be79b50a4717aea51ab69 (change_site) Author: runoob \u0026lt;test@runoob.com\u0026gt; Date: Fri May 3 15:49:26 2019 +0800 changed the runoob.php commit c1501a244676ff55e7cccac1ecac0e18cbf6cb00 Author: runoob \u0026lt;test@runoob.com\u0026gt; Date: Fri May 3 15:35:32 2019 +0800 我们可以用 \u0026ndash;oneline 选项来查看历史记录的简洁的版本。\n1 2 3 4 5 6 7 $ git log --oneline d5e9fc2 (HEAD -\u0026gt; master) Merge branch \u0026#39;change_site\u0026#39; c68142b 修改代码 7774248 (change_site) changed the runoob.php c1501a2 removed test.txt、add runoob.php 3e92c19 add test.txt 3b58100 第一次版本提交 这告诉我们的是，此项目的开发历史。\n我们还可以用 \u0026ndash;graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：\n1 2 3 4 5 6 7 8 9 $ git log --graph * d5e9fc2 (HEAD -\u0026gt; master) Merge branch \u0026#39;change_site\u0026#39; |\\ | * 7774248 (change_site) changed the runoob.php * | c68142b 修改代码 |/ * c1501a2 removed test.txt、add runoob.php * 3e92c19 add test.txt * 3b58100 第一次版本提交 现在我们可以更清楚明了地看到何时工作分叉、又何时归并。\n你也可以用 \u0026ndash;reverse 参数来逆向显示所有日志。\n1 2 3 4 5 6 7 $ git log --reverse --oneline 3b58100 第一次版本提交 3e92c19 add test.txt c1501a2 removed test.txt、add runoob.php 7774248 (change_site) changed the runoob.php c68142b 修改代码 d5e9fc2 (HEAD -\u0026gt; master) Merge branch \u0026#39;change_site\u0026#39; 如果只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：\n1 2 3 4 5 6 $ git log --author=Linus --oneline -5 81b50f3 Move \u0026#39;builtin-*\u0026#39; into a \u0026#39;builtin/\u0026#39; subdirectory 3bb7256 make \u0026#34;index-pack\u0026#34; a built-in 377d027 make \u0026#34;git pack-redundant\u0026#34; a built-in b532581 make \u0026#34;git unpack-file\u0026#34; a built-in 112dd51 make \u0026#34;mktag\u0026#34; a built-in 如果你要指定日期，可以执行几个选项：\u0026ndash;since 和 \u0026ndash;before，但是你也可以用 \u0026ndash;until 和 \u0026ndash;after。\n例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 \u0026ndash;no-merges 选项以隐藏合并提交）：\n1 2 3 4 5 6 7 8 9 10 $ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges 5469e2d Git 1.7.1-rc2 d43427d Documentation/remote-helpers: Fix typos and improve language 272a36b Fixup: Second argument may be any arbitrary string b6c8d2d Documentation/remote-helpers: Add invocation section 5ce4f4e Documentation/urls: Rewrite to accomodate transport::address 00b84e9 Documentation/remote-helpers: Rewrite description 03aa87e Documentation: Describe other situations where -z affects git diff 77bc694 rebase-interactive: silence warning when no commits rewritten 636db2c t3301: add tests to use --format=\u0026#34;%N\u0026#34; 更多 git log 命令可查看：http://git-scm.com/docs/git-log\ngit blame 如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：\n1 git blame \u0026lt;file\u0026gt; git blame 命令是以列表形式显示修改记录，如下实例：\n1 2 3 $ git blame README ^d2097aa (tianqixin 2020-08-25 14:59:25 +0800 1) # Runoob Git 测试 db9315b0 (runoob 2020-08-25 16:00:23 +0800 2) # 菜鸟教程 Git 标签 如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。\n比如说，我们想为我们的 runoob 项目发布一个\u0026quot;1.0\u0026quot;版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）\u0026ldquo;v1.0\u0026quot;的标签。\n-a 选项意为\u0026quot;创建一个带注解的标签\u0026rdquo;。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。\n1 $ git tag -a v1.0 当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。\n现在，注意当我们执行 git log --decorate 时，我们可以看到我们的标签了：\n1 2 3 4 5 6 7 8 9 $ git log --decorate * d5e9fc2 (HEAD -\u0026gt; master) Merge branch \u0026#39;change_site\u0026#39; |\\ | * 7774248 (change_site) changed the runoob.php * | c68142b 修改代码 |/ * c1501a2 removed test.txt、add runoob.php * 3e92c19 add test.txt * 3b58100 第一次版本提交 如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。\n例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：\n1 2 3 4 5 6 7 8 9 10 $ git tag -a v0.9 85fc7e7 $ git log --oneline --decorate --graph * d5e9fc2 (HEAD -\u0026gt; master) Merge branch \u0026#39;change_site\u0026#39; |\\ | * 7774248 (change_site) changed the runoob.php * | c68142b 修改代码 |/ * c1501a2 removed test.txt、add runoob.php * 3e92c19 add test.txt * 3b58100 (tag: v0.9) 第一次版本提交 如果我们要查看所有标签可以使用以下命令：\n1 2 3 $ git tag v0.9 v1.0 指定标签信息命令：\n1 git tag -a \u0026lt;tagname\u0026gt; -m \u0026#34;runoob.com标签\u0026#34; PGP签名标签命令：\n1 git tag -s \u0026lt;tagname\u0026gt; -m \u0026#34;runoob.com标签\u0026#34; Git 远程仓库（GitHub） 目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。\n本例使用了 Github 作为远程仓库，你可以先阅读我们的 Github 简明教程。\n添加远程库 要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：\n1 git remote add [shortname] [url] 本例以 Github 为例作为远程仓库，如果你没有 Github 可以在官网 https://github.com/ 注册。\n由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以我们需要配置验证信息：\n使用以下命令生成 SSH Key：\n1 $ ssh-keygen -t rsa -C \u0026#34;youremail@example.com\u0026#34; 后面的 your_email@youremail.com 改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。\n成功的话会在 ~/ 下生成 .ssh 文件夹，进去，打开 id_rsa.pub，复制里面的 key。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ ssh-keygen -t rsa -C \u0026#34;429240967@qq.com\u0026#34; Generating public/private rsa key pair. Enter file in which to save the key (/Users/tianqixin/.ssh/id_rsa): Enter passphrase (empty for no passphrase): # 直接回车 Enter same passphrase again: # 直接回车 Your identification has been saved in /Users/tianqixin/.ssh/id_rsa. Your public key has been saved in /Users/tianqixin/.ssh/id_rsa.pub. The key fingerprint is: SHA256:MDKVidPTDXIQoJwoqUmI4LBAsg5XByBlrOEzkxrwARI 429240967@qq.com The key\u0026#39;s randomart image is: +---[RSA 3072]----+ |E*+.+=**oo | |%Oo+oo=o. . | |%**.o.o. | |OO. o o | |+o+ S | |. | | | | | | | +----[SHA256]-----+ 回到 github 上，进入 Account =\u0026gt; Settings（账户配置）。\n左边选择 SSH and GPG keys，然后点击 New SSH key 按钮。\n![SSH and GPG keys](./assets/SSH and GPG keys.png)\ntitle 设置标题，可以随便填，key 粘贴在你电脑上生成的 key（ 上面生成的~/.ssh/id_rsa.pub文件内容），最后点击Add SSH key按钮添加。\n添加成功后界面如下所示\n![SSH and GPG keys](./assets/SSH and GPG keys.png)\n为了验证是否成功，输入以下命令：\n1 2 3 4 5 6 $ ssh -T git@github.com The authenticity of host \u0026#39;github.com (52.74.223.119)\u0026#39; can\u0026#39;t be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes # 输入 yes Warning: Permanently added \u0026#39;github.com,52.74.223.119\u0026#39; (RSA) to the list of known hosts. Hi tianqixin! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. # 成功信息 以上命令说明我们已成功连上 Github。\n之后点击 New repository 如下图所示：\n之后在在 Repository name 填入 myblog（远程仓库名） ，其他保持默认设置，点击Create repository按钮，就成功地创建了一个新的Git仓库：\n创建成功后，显示如下信息：\n以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到 GitHub 仓库。\n现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ mkdir myblog\t# 创建测试目录 $ cd myblog/ # 进入测试目录 $ echo \u0026#34;# Git 测试\u0026#34; \u0026gt;\u0026gt; README.md\t# 创建 README.md 文件并写入内容 $ ls # 查看目录下的文件 README $ git init # 初始化 $ git add README.md # 添加文件 $ git commit -m \u0026#34;添加 README.md 文件\u0026#34; # 提交并备注信息 [master (root-commit) 0205aab] 添加 README.md 文件 1 file changed, 1 insertion(+) create mode 100644 README.md # 提交到 Github $ git remote add origin git@github.com:Ryukarin/myblog.git $ git push -u origin master 以下命令请根据你在 Github 成功创建新仓库的地方复制，而不是根据我提供的命令，因为我们的 Github 用户名不一样，仓库名也不一样。\n接下来我们返回 Github 创建的仓库，就可以看到文件已上传到 Github上：\n查看当前的远程库 要查看当前配置有哪些远程仓库，可以用命令：\n1 git remote 实例\n1 2 3 4 5 $ git remote origin $ git remote -v origin\tgit@github.com:Ryukarin/myblog.git (fetch) origin\tgit@github.com:Ryukarin/myblog.git (push) 执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。\n提取远程仓库 Git 有两个命令用来提取远程仓库的更新。\n从远程仓库下载新分支与数据： 1 git fetch 该命令执行完后需要执行 git merge 远程分支到你所在的分支。\n从远端仓库提取数据并尝试合并到当前分支： 1 git merge 该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。\n假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 git fetch [alias] 告诉 Git 去获取它有你没有的数据，然后你可以执行 git merge [alias]/[branch] 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。\n接下来我们在 Github 上点击 README.md 并在线修改它:\n修改好 README.md 之后，点击底部的 Commit changes 按钮。\n然后我们在本地更新修改。\n1 2 3 4 5 6 7 $ git fetch origin remote: Counting objects: 3, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), done. From github.com:Ryukarin/myblog 0205aab..febd8ed master -\u0026gt; origin/main 以上信息\u0026quot;0205aab..febd8ed master -\u0026gt; origin/master\u0026quot; 说明 main 分支已被更新，我们可以使用以下命令将更新同步到本地：\n1 2 3 4 5 $ git merge origin/main Updating 0205aab..febd8ed Fast-forward README.md | 1 + 1 file changed, 1 insertion(+) 查看 README.md 文件内容：\n1 2 3 4 $ cat README.md # Git 测试 --- ## 第一次修改内容（二级标题） 推送到远程仓库 推送你的新分支与数据到某个远端仓库命令：\n1 git push [alias] [branch] 以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。\n1 2 3 4 5 6 7 8 $ touch test.txt # 添加文件 $ git add test.txt $ git commit -m \u0026#34;添加到远程\u0026#34; master 69e702d] 添加到远程 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 test.txt $ git push origin master # 推送到 Github 重新回到我们的 Github 仓库，可以看到文件已经提交上来了：\n删除远程仓库 删除远程仓库你可以使用命令：\n1 git remote rm [别名] 实例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ git remote -v origin git@github.com:Ryukarin/myblog.git (fetch) origin git@github.com:Ryukarin/myblog.git (push) # 添加仓库 origin2 $ git remote add origin2 git@github.com:Ryukarin/myblog.git $ git remote -v origin git@github.com:Ryukarin/myblog.git (fetch) origin git@github.com:Ryukarin/myblog.git (push) origin2 git@github.com:Ryukarin/myblog.git (fetch) origin2 git@github.com:Ryukarin/myblog.git (push) # 删除仓库 origin2 $ git remote rm origin2 $ git remote -v origin git@github.com:Ryukarin/myblog.git (fetch) origin git@github.com:Ryukarin/myblog.git (push) ::: tip 码云（Gitee）\n大家都知道国内访问 Github 速度比较慢，很影响我们的使用。\n如果你希望体验到 Git 飞一般的速度，可以使用国内的 Git 托管服务——Gitee（gitee.com）。\nGitee 提供免费的 Git 仓库，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee 还提供了项目管理、代码托管、文档管理的服务，5 人以下小团队免费。\n使用方法和 Github 大同小异，具体就不展开说了。\n:::\nGit 服务器搭建 前面我们远程仓库使用了 Github，Github 公开的项目是免费的，2019 年开始 Github 私有存储库也可以无限制使用。\n这当然我们也可以自己搭建一台 Git 服务器作为私有仓库使用。\n接下来我们将以 Centos 为例搭建 Git 服务器。\n安装Git 1 2 $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel $ yum install git 接下来我们 创建一个git用户组和用户，用来运行git服务：\n1 2 $ groupadd git $ useradd git -g git 创建证书登录 收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。\n如果没有该文件创建它：\n1 2 3 4 5 $ cd /home/git/ $ mkdir .ssh $ chmod 755 .ssh $ touch .ssh/authorized_keys $ chmod 644 .ssh/authorized_keys 初始化Git仓库 首先我们选定一个目录作为 Git 仓库，假定是 /home/gitrepo/runoob.git，在 /home/gitrepo 目录下输入命令：\n1 2 3 4 5 6 7 $ cd /home $ mkdir gitrepo $ chown git:git gitrepo/ $ cd gitrepo $ git init --bare runoob.git Initialized empty Git repository in /home/gitrepo/runoob.git/ 以上命令 Git 创建一个空仓库，服务器上的Git仓库通常都以 .git 结尾。然后，把仓库所属用户改为git：\n1 $ chown -R git:git runoob.git 克隆仓库 1 2 3 4 $ git clone git@192.168.45.4:/home/gitrepo/runoob.git Cloning into \u0026#39;runoob\u0026#39;... warning: You appear to have cloned an empty repository. Checking connectivity... done. 192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。\n这样我们的 Git 服务器安装就完成。\n","permalink":"https://blog.sfcs.eu.org/posts/it/git/","summary":"Git 笔记 Git 是什么 Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS，Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\nGit 不仅仅是个版本控制系统，它也是个内容管理系统（CMS），工作管理系统等。\nGit 安装配置 在使用 Git 前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac 和 Windows 平台上运行。\nGit 各平台安装包下载地址为：http://git-scm.com/downloads\n::: tip 说明\n本笔记主要以 Linux 平台为主\nGit 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。\n:::\n各 Linux 系统可以使用其安装包管理工具（apt-get、yum 等）进行安装：\nDebian/Ubuntu 如果你使用的系统是 Debian/Ubuntu， Git 安装命令为：\n1 2 3 4 $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev $ apt-get install git $ git --version git version 1.","title":"Git笔记"},{"content":"IT 基础知识 就是平时遇到的最基本的知识，网罗到此处。包括各个方面：\nLinux\nWindows\n各种系统\n网络\n各种协议\n等等\u0026hellip;\u0026hellip;\n都是之前学习或临时用到的时候，记的一些学习笔记。长时间没怎么用，再想用就已经忘的差不多了。所以，整理起来，以便日后方便查阅。\n","permalink":"https://blog.sfcs.eu.org/posts/it/readme/","summary":"IT 基础知识 就是平时遇到的最基本的知识，网罗到此处。包括各个方面：\nLinux\nWindows\n各种系统\n网络\n各种协议\n等等\u0026hellip;\u0026hellip;\n都是之前学习或临时用到的时候，记的一些学习笔记。长时间没怎么用，再想用就已经忘的差不多了。所以，整理起来，以便日后方便查阅。","title":"IT 基础"},{"content":"SFTP 介绍 SFTP 是 SSH File Transfer Protocol 的缩写，安全文件传送协议。SFTP 与 FTP 有着几乎一样的语法和功能。SFTP 为 SSH 的其中一部分，是一种传输档案至 Blogger 伺服器的安全方式。\n其实在 SSH 软件包中，已经包含了一个叫作 SFTP 的安全文件信息传输子系统，SFTP 本身没有单独的守护进程，它必须使用 sshd 守护进程（端口号默认是 22）来完成相应的连接和答复操作，所以从某种意义上来说，SFTP 并不像一个服务器程序，而更像是一个客户端程序。\n如何登录 SFTP sftp 服务器IP\nsftp 服务器IP 回车之后，会提示输入默认用户密码进行验证，验证成功后即登录成功。\n1 2 3 4 kei@kei-KVM:~/Desktop$ sftp 9.200.76.179 ryuu@9.200.76.179\u0026#39;s password: Connected to 9.200.76.179. sftp\u0026gt; sftp user@服务器IP\nsftp user@服务器IP 之后，会提示输入指定用户 user 的密码进行验证，验证成功后即登录成功。\n1 2 3 4 kei@kei-KVM:~/Desktop$ sftp karin@9.200.76.179 karin@9.200.76.179\u0026#39;s password: Connected to 9.200.76.179. sftp\u0026gt; SFTP 的基本命令 同 FTP 一样，命令 ? 或者 help 可以查看所有命令帮助信息。如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 sftp\u0026gt; ? Available commands: bye 退出 sftp cd path 更改远程目录到 \u0026#39;path\u0026#39; chgrp [-h] grp path 将文件 \u0026#39;path\u0026#39; 的组更改为 \u0026#39;grp\u0026#39; chmod [-h] mode path 将文件 \u0026#39;path\u0026#39; 的权限更改为 \u0026#39;mode\u0026#39; chown [-h] own path 将文件 \u0026#39;path\u0026#39; 的属主更改为 \u0026#39;own\u0026#39; df [-hi] [path] 显示当前目录的统计信息或包含 \u0026#39;path\u0026#39; 的文件系统 exit 退出 sftp get [-afpR] remote [local] 下载文件 help 显示这个帮助文本 lcd path 更改本地目录到 \u0026#39;path\u0026#39; lls [ls-options [path]] 显示本地目录列表 lmkdir path 创建本地目录 ln [-s] oldpath newpath 符号链接远程文件 lpwd 显示本地工作目录 ls [-1afhlnrSt] [path] 显示远程目录列表 lumask umask 将本地umask设置为 \u0026#39;umask\u0026#39; mkdir path 创建远程目录 progress 切换是否显示文件传输进度 put [-afpR] local [remote] 上传文件 pwd 显示远程工作目录 quit 退出 sftp reget [-fpR] remote [local] 恢复下载文件 rename oldpath newpath 重命名远程文件 reput [-fpR] local [remote] 恢复上传文件 rm path 删除远程文件 rmdir path 删除远程目录 symlink oldpath newpath 符号链接远程文件 version 显示 SFTP 版本信息 !command 在本地shell中执行 \u0026#39;command\u0026#39; ! 启动本地shell ? 帮助信息 sftp\u0026gt; ? lpwd 常用命令 文件或目录操作命令 pwd：是看 sftp 服务器当前工作目录\nlpwd：是看本地当前工作目录\nls ：是看 sftp 服务器下当前目录下的文件列表\nlls：是看本地当前目录下的文件列表\ncd path：更改远程目录到 \u0026lsquo;path\u0026rsquo;\nlcd path：更改本地目录到 \u0026lsquo;path\u0026rsquo;\nmkdir path：创建远程目录\nrmdir path：删除远程目录\nrm file：删除远程文件\nrename oldfile newfile：重命名远程文件\n上传命令 put [-r] localfile [remotefile]\n如果不指定 remotefile，将使用和本地文件相同的文件名。参数 -r 来上传整个目录。\n这个是把本地的 test.txt 文件和 /home/ryuu/newfolder/ 目录上传到 sftp 服务器上的当前目录下。（当然也可以上传到指定的服务器目录）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #上传文件 上传文件sftp\u0026gt; put /home/kei/test.txt Uploading /home/kei/test.txt to /home/ryuu/test.txt /home/kei/test.txt 100% 0 0.0KB/s 00:00 sftp\u0026gt; ls Desktop Documents Downloads IOSAPP Pictures Templates config.json derby.log fontconfig hello nohup.out share test.txt #上传文件夹 sftp\u0026gt; put -r /home/kei/newfolder/ Uploading /home/kei/newfolder/ to /home/ryuu/newfolder sftp\u0026gt; ls Desktop Documents Downloads IOSAPP Pictures Templates config.json derby.log fontconfig hello newfolder\tnohup.out share test.txt sftp\u0026gt; 下载命令 get [-r] remotefile [localfile]\n如果不指定 localfile，将使用和服务器文件相同的文件名。参数 -r 来下载整个目录。\n这个是把 sftp 服务器上的 hello 文件和 /home/ryuu/Documents/ 文件夹下载到本地当前目录下。（当然也可以下载到指定的本地目录）\n1 2 3 4 5 6 7 8 9 10 11 12 13 #下载文件 sftp\u0026gt; get /home/ryuu/hello Fetching /home/ryuu/hello to hello /home/ryuu/hello 100% 174 45.4KB/s 00:00 #下载文件夹 sftp\u0026gt; get -r /home/ryuu/Documents/ /home/ryuu/Documents/md/deploy.sh 100% 493 611.1KB/s 00:00 /home/ryuu/Documents/test.txt 100% 790 1.0MB/s 00:00 /home/ryuu/Documents/new 100% 37 100.0KB/s 00:00 /home/ryuu/Documents/old 100% 26 6.0KB/s 00:00 /home/ryuu/Documents/webmin-1.972.tar.gz 100% 40MB 36.9MB/s 00:01 sftp\u0026gt; 其他命令 exit：退出 sftp\nbye：退出 sftp\nquit：退出 sftp\nhelp：显示这个帮助文本\n!command：在本地shell中执行 \u0026lsquo;command\u0026rsquo;\n!：启动本地shell\n::: tip 说明\n以上所有示例都是再 Ubuntu 系统下的命令行模式操作。\nWindows 同样操作方法，只是界面和盘符显示不同而已。\n:::\n","permalink":"https://blog.sfcs.eu.org/posts/it/sftp/","summary":"SFTP 介绍 SFTP 是 SSH File Transfer Protocol 的缩写，安全文件传送协议。SFTP 与 FTP 有着几乎一样的语法和功能。SFTP 为 SSH 的其中一部分，是一种传输档案至 Blogger 伺服器的安全方式。\n其实在 SSH 软件包中，已经包含了一个叫作 SFTP 的安全文件信息传输子系统，SFTP 本身没有单独的守护进程，它必须使用 sshd 守护进程（端口号默认是 22）来完成相应的连接和答复操作，所以从某种意义上来说，SFTP 并不像一个服务器程序，而更像是一个客户端程序。\n如何登录 SFTP sftp 服务器IP\nsftp 服务器IP 回车之后，会提示输入默认用户密码进行验证，验证成功后即登录成功。\n1 2 3 4 kei@kei-KVM:~/Desktop$ sftp 9.200.76.179 ryuu@9.200.76.179\u0026#39;s password: Connected to 9.200.76.179. sftp\u0026gt; sftp user@服务器IP\nsftp user@服务器IP 之后，会提示输入指定用户 user 的密码进行验证，验证成功后即登录成功。\n1 2 3 4 kei@kei-KVM:~/Desktop$ sftp karin@9.200.76.179 karin@9.200.76.179\u0026#39;s password: Connected to 9.200.76.179. sftp\u0026gt; SFTP 的基本命令 同 FTP 一样，命令 ?","title":"SFTP笔记"},{"content":"","permalink":"https://blog.sfcs.eu.org/about/","summary":"","title":"关于"}]